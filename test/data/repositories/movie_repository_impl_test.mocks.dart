// Mocks generated by Mockito 5.0.16 from annotations
// in useacademy_semana2/test/data/repositories/movie_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:useacademy_semana2/data/datasources/movie_data_source.dart'
    as _i3;
import 'package:useacademy_semana2/data/models/models.dart' as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeMovieModel_0 extends _i1.Fake implements _i2.MovieModel {}

/// A class which mocks [MovieDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieDataSource extends _i1.Mock implements _i3.MovieDataSource {
  MockMovieDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.MovieModel> getMovie(String? movieId) =>
      (super.noSuchMethod(Invocation.method(#getMovie, [movieId]),
              returnValue: Future<_i2.MovieModel>.value(_FakeMovieModel_0()))
          as _i4.Future<_i2.MovieModel>);
  @override
  _i4.Future<List<_i2.MovieModel>> getMoviesList(String? keyWordTypeMovie) =>
      (super.noSuchMethod(Invocation.method(#getMoviesList, [keyWordTypeMovie]),
              returnValue:
                  Future<List<_i2.MovieModel>>.value(<_i2.MovieModel>[]))
          as _i4.Future<List<_i2.MovieModel>>);
  @override
  _i4.Future<List<_i2.MovieModel>> getComingSoonMovies() => (super.noSuchMethod(
          Invocation.method(#getComingSoonMovies, []),
          returnValue: Future<List<_i2.MovieModel>>.value(<_i2.MovieModel>[]))
      as _i4.Future<List<_i2.MovieModel>>);
  @override
  String toString() => super.toString();
}
